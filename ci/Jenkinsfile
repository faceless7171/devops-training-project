pipeline{
    agent {
      label 'linux'
    }
    parameters {
        string(defaultValue: '1.1.1', description: 'Specify build version', name: 'VERSION', trim: false)
        booleanParam(defaultValue: false, description: 'Set build version to 0', name: 'RESET_BUILD_VERSION')
    }
    stages{
        stage('Update build version') {
            steps {
                script {
                    def version
                    if ( var.RESET_BUILD_VERSION == true ) {
                        version = VersionNumber(projectStartDate: '2000-01-01', overrideBuildsAllTime: '0', versionNumberString: 'BUILDS_ALL_TIME', versionPrefix: "${VERSION}.", worstResultForIncrement: 'SUCCESS')
                    } else {
                        version = VersionNumber(projectStartDate: '2000-01-01', versionNumberString: 'BUILDS_ALL_TIME', versionPrefix: "${VERSION}.", worstResultForIncrement: 'SUCCESS')
                    }
                    buildName(version)
                }
            }
        }
        stage("Pack docker image"){
            steps{
                withDockerRegistry([credentialsId: 'b2ad52d0-aab7-437d-8170-b8c4b4600821', url: 'http://10.0.10.177:8083/repository/docker-dev']) {
                    sh '''
                    docker build -t frontend -f ci/Front-dockerfile .
                    docker push frontend:${VERSION}
                    '''
                }
            }
            post{
                always{
                    echo "====++++always++++===="
                }
                success{
                    echo "====++++Pack docker image executed succesfully++++===="
                }
                failure{
                    echo "====++++Pack docker image execution failed++++===="
                }
        
            }
        }
    }
    post{
        always{
            echo "========always========"
            sh 'chown -R $(stat -c %u:%g .) ${WORKSPACE}'
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}