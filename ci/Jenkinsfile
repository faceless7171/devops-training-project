pipeline{
    agent {
      label 'linux'
    }
    parameters {
        string(defaultValue: '1.1.1', description: 'Specify build version in format MAJOR.MINOR.PATCH', name: 'VERSION', trim: false)
        booleanParam(defaultValue: false, description: 'Set build version to 0', name: 'RESET_BUILD_VERSION')
    }
    stages{
        stage('Update build version') {
            steps {
                script {
                    def version
                    if ( env.RESET_BUILD_VERSION == true ) {
                        version = VersionNumber(projectStartDate: '2000-01-01', overrideBuildsAllTime: '0', versionNumberString: '${VERSION}.${BUILDS_ALL_TIME}', worstResultForIncrement: 'SUCCESS')
                    } else {
                        version = VersionNumber(projectStartDate: '2000-01-01', versionNumberString: '${VERSION}.${BUILDS_ALL_TIME}', worstResultForIncrement: 'SUCCESS')
                    }
                    env.VERSION = version
                    buildName(version)
                }
            }
        }
        stage("Pack docker images"){
            parallel {
                stage("Front"){
                    steps{
                        withDockerRegistry([credentialsId: 'b2ad52d0-aab7-437d-8170-b8c4b4600821', url: 'http://10.0.10.177:8083']) {
                            sh '''
                            docker build -t 10.0.10.177:8083/frontend:${VERSION} -f ci/Front-dockerfile ${WORKSPACE}
                            docker push 10.0.10.177:8083/frontend:${VERSION}
                            '''
                        }
                    }
                }
                stage("Back"){
                    steps{
                        withDockerRegistry([credentialsId: 'b2ad52d0-aab7-437d-8170-b8c4b4600821', url: 'http://10.0.10.177:8083']) {
                            sh '''
                            docker build -t 10.0.10.177:8083/backend:${VERSION} -f ci/Back-dockerfile ${WORKSPACE}
                            docker push 10.0.10.177:8083/backend:${VERSION}
                            '''
                        }
                    }
                }
            }
        }
        stage("Deployment"){
            parallel{
                stage("Front"){
                    steps{
                        sh '''
                        cp -r ci/s3_folder ci/s3_front
                        sed -i 's+DOCKER_NAME+frontend+g' ci/s3_front/scripts/start_app ci/s3_front/scripts/stop_app
                        sed -i "s+DOCKER_IMAGE+10.0.10.177:8083/frontend:${VERSION}+g" ci/s3_front/scripts/start_app
                        '''
                        step([$class: 'AWSCodeDeployPublisher', applicationName: 'nsoroka-training-front', awsAccessKey: '', awsSecretKey: '', credentials: 'awsAccessKey', deploymentGroupAppspec: false, deploymentGroupName: 'nsoroka-training-front', deploymentMethod: 'deploy', excludes: '', iamRoleArn: '', includes: '**', pollingFreqSec: 15, pollingTimeoutSec: 600, proxyHost: '', proxyPort: 0, region: 'us-east-1', s3bucket: 'nsoroka-training-s3', s3prefix: 'frontend', subdirectory: 'ci/s3_front', versionFileName: '', waitForCompletion: true])
                    }
                }
                stage("Back"){
                    steps{
                        sh '''
                        cp -r ci/s3_folder ci/s3_back
                        sed -i 's+DOCKER_NAME+backend+g' ci/s3_back/scripts/start_app ci/s3_back/scripts/stop_app
                        sed -i "s+DOCKER_IMAGE+10.0.10.177:8083/backend:${VERSION}+g" ci/s3_back/scripts/start_app
                        sed -i "s+80:80+8080:8080+g" ci/s3_back/scripts/start_app
                        '''
                        step([$class: 'AWSCodeDeployPublisher', applicationName: 'nsoroka-training-front', awsAccessKey: '', awsSecretKey: '', credentials: 'awsAccessKey', deploymentGroupAppspec: false, deploymentGroupName: 'nsoroka-training-back', deploymentMethod: 'deploy', excludes: '', iamRoleArn: '', includes: '**', pollingFreqSec: 15, pollingTimeoutSec: 600, proxyHost: '', proxyPort: 0, region: 'us-east-1', s3bucket: 'nsoroka-training-s3', s3prefix: 'backend', subdirectory: 'ci/s3_back', versionFileName: '', waitForCompletion: true])
                    }
                }
            }
        }
    }
    post{
        always{
            echo "========always========"
            sh 'chown -R $(stat -c %u:%g .) ${WORKSPACE}'
            cleanWs()
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}